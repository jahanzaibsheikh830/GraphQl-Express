{"version":3,"sources":["config/config.js","component/artist.js","component/navbar/header.js","component/songs.js","component/allSongs.js","component/navbar/router.js","App.js","index.js"],"names":["httpLink","HttpLink","uri","wsLink","WebSocketLink","options","reconnect","splitLink","split","query","definition","getMainDefinition","kind","operation","client","ApolloClient","link","cache","InMemoryCache","GET_ARTIST","gql","ADD_ARTIST","Artist","name","country","useQuery","loading","error","data","useMutation","addArtist","className","onSubmit","e","preventDefault","variables","value","catch","err","console","log","type","placeholder","required","ref","id","artists","map","v","i","to","pathname","state","songs","Header","href","data-toggle","data-target","aria-controls","aria-expanded","aria-label","ADD_SONG","DEL_SONG","Songs","props","title","duration","genre","songsData","location","useParams","addSong","deleteSong","Number","artistId","onClick","del","GET_SONGS","artist","RouterConfig","exact","path","component","AllSongs","App","ApolloProvider","Client","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5423b278.chunk.js","sourcesContent":["import { ApolloClient, InMemoryCache } from '@apollo/client';\r\nimport { split, HttpLink } from '@apollo/client';\r\nimport { getMainDefinition } from '@apollo/client/utilities';\r\nimport { WebSocketLink } from '@apollo/client/link/ws';\r\n\r\nconst httpLink = new HttpLink({\r\n  uri: 'http://localhost:5000/graphql'\r\n});\r\n\r\nconst wsLink = new WebSocketLink({\r\n  uri: 'ws://localhost:5000/graphql',\r\n  options: {\r\n    reconnect: true\r\n  }\r\n});\r\n\r\nconst splitLink = split(\r\n  ({ query }) => {\r\n    const definition = getMainDefinition(query);\r\n    return (\r\n      definition.kind === 'OperationDefinition' &&\r\n      definition.operation === 'subscription'\r\n    );\r\n  },\r\n  wsLink,\r\n  httpLink,\r\n);\r\n\r\nconst client = new ApolloClient({\r\n  link: splitLink,\r\n  cache: new InMemoryCache()\r\n});\r\n\r\nexport default client","import React from 'react'\r\nimport './style.css'\r\nimport { useQuery, gql, useMutation } from '@apollo/client';\r\nimport { Link } from 'react-router-dom'\r\nconst GET_ARTIST = gql`\r\n  query GetAllARTIST {\r\n    artists {\r\n        name\r\n        country\r\n        id\r\n        songs{\r\n          title\r\n          duration\r\n          genre\r\n          id\r\n          artistId\r\n        }\r\n    }\r\n  }\r\n`;\r\nconst ADD_ARTIST = gql`\r\n    mutation addArtist($name: String!, $country: String!){\r\n      addArtist(artist: {name: $name, country: $country}){\r\n            name\r\n            country\r\n        }\r\n    }\r\n`\r\nfunction Artist() {\r\n  let name, country\r\n  const { loading, error, data } = useQuery(GET_ARTIST);\r\n  const [addArtist] = useMutation(ADD_ARTIST)\r\n  if (loading) return <p>Loading...</p>;\r\n  if (error) return <p>Error :(</p>;\r\n  return (\r\n    <div className='container'>\r\n      <h2 className=\"text-center mt-3\">Artist</h2>\r\n      <div className='row justify-content-center'>\r\n        <div className='col-md-6'>\r\n          <form onSubmit={e => {\r\n            e.preventDefault()\r\n            addArtist({ variables: { name: name.value, country: country.value} })\r\n              .catch(err => {\r\n                console.log(\"grapghql err\", err)\r\n              })\r\n          }}>\r\n            <div className=\"form-row\">\r\n              <div className=\"col\">\r\n                <input type=\"text\" className=\"form-control\"\r\n                  placeholder=\"Name\" required ref={value => name = value} id=\"name\" />\r\n              </div>\r\n              <div className=\"col\">\r\n                <input type=\"text\" className=\"form-control\"\r\n                  placeholder=\"Country\" required ref={value => country = value} id=\"country\" />\r\n              </div>\r\n            </div><br></br>\r\n            <div>\r\n              <button type='submit' className='btn btn-outline-dark'>Submit</button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n      <div className=\"row mt-5\">\r\n        {\r\n          data.artists.map((v, i) => {\r\n            return (\r\n              <div className=\"col-md-4\" key={i}>\r\n                <div className=\"card py-5 px-5\">\r\n                  <h4>Artist Name: {v.name}</h4>\r\n                  <h4>Country: {v.country}</h4>\r\n                  <Link className=\"btn btn-outline-dark mt-4\"\r\n                    to={{ pathname: `/songs/${v.id}`, state: v.songs }}> Songs</Link>\r\n                </div>\r\n              </div>\r\n            )\r\n          })\r\n        }\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Artist","import React from 'react'\r\nimport '../style.css'\r\nimport {Link} from 'react-router-dom'\r\nfunction Header(){\r\n    return(\r\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n        <a className=\"navbar-brand\" href=\"#\">GraphQl</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavAltMarkup\" aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\" />\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\">\r\n          <div className=\"navbar-nav\">\r\n            <Link className=\"nav-item nav-link active\" href=\"#\" to=\"/\">Artist<span className=\"sr-only\">(current)</span></Link>\r\n            <Link className=\"nav-item nav-link active\" href=\"#\" to=\"/allsongs\">Songs</Link>\r\n            {/* <Link className=\"nav-item nav-link active\" href=\"#\">Artist</Link>\r\n            <Link className=\"nav-item nav-link active\" href=\"#\">Artist</Link>\r\n            <Link className=\"nav-item nav-link active\" href=\"#\">Artist</Link> */}\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    )\r\n}\r\nexport default Header","import React from 'react'\r\nimport { gql, useMutation, useSubscription } from '@apollo/client';\r\nimport {useParams} from 'react-router-dom'\r\nconst ADD_SONG =gql`\r\n    mutation addSong($title: String!, $duration: Int!, $genre: String!, $artistId: ID! ){\r\n        addSong(song: {title: $title, duration: $duration, genre: $genre, artistId: $artistId}){\r\n            title\r\n            duration\r\n            genre\r\n            artistId\r\n        }\r\n    }\r\n`\r\n    const DEL_SONG = gql `\r\n        mutation deleteSong($id: ID!){\r\n            deleteSong(id: $id)\r\n        }\r\n    `   \r\n\r\nfunction Songs(props) {\r\n    let title, duration, genre\r\n    const songsData = props.location.state\r\n    const {id} = useParams()\r\n    const [addSong] = useMutation(ADD_SONG)\r\n    const [deleteSong] = useMutation(DEL_SONG)\r\n    function del(id){\r\n        deleteSong({variables:{id}})\r\n    }\r\n    return (\r\n        <div>\r\n            <div className='container'>\r\n                <h2 className='text-center mt-3'>Songs</h2>\r\n                <div className='row justify-content-center'>\r\n                    <div className='col-md-6'>\r\n                    <form onSubmit={e=>{\r\n                        e.preventDefault()\r\n                        addSong({variables:{title: title.value, duration: Number(duration.value), genre: genre.value, artistId:id}})\r\n                        .catch(err=>{\r\n                            console.log(\"grapghql err\" , err)\r\n                        })\r\n                        console.log(title.value ,duration.value,genre.value,id)\r\n                    }}>\r\n                        <div className=\"form-row\">\r\n                            <div className=\"col\">\r\n                                <input type=\"text\" className=\"form-control\"\r\n                                 placeholder=\"Title\" required ref={value => title = value} id=\"title\"/>\r\n                            </div>\r\n                            <div className=\"col\">\r\n                                <input type=\"number\" className=\"form-control\"\r\n                                 placeholder=\"Duration\" required ref={value => duration = value} id=\"duration\"/>\r\n                            </div>\r\n                        </div><br></br>\r\n                        <div className=\"form-row\">\r\n                            <div className=\"col\">\r\n                                <input type=\"text\" className=\"form-control\"\r\n                                 placeholder=\"Genre\" required ref={value => genre = value} id=\"genre\"/>\r\n                            </div>\r\n                        </div><br></br>\r\n                        <div>\r\n                            <button type='submit' className='btn btn-outline-dark'>Submit</button>\r\n                        </div>\r\n                    </form>\r\n                    </div>\r\n                </div>\r\n                <div className='row mt-5'>\r\n                    {\r\n                        songsData && songsData.map((v, i) => {\r\n                            return (\r\n                                <div className='col-md-4' key={i}>\r\n                                    <div className='card py-5 px-5' >\r\n                                        <h4>Song Title: {v.title}</h4>\r\n                                        <h4>Duration: {v.duration}</h4>\r\n                                        <h4>Genre: {v.genre}</h4>\r\n                                        <button className=\"btn btn-outline-dark\" onClick={()=>del(v.id) }>Delete</button>\r\n                                    </div>\r\n                                </div>\r\n                            )\r\n                        })\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Songs","import React from 'react'\r\nimport './style.css'\r\nimport { useQuery, gql } from '@apollo/client';\r\nimport { Link } from 'react-router-dom'\r\nconst GET_SONGS = gql`\r\n  query GetAllSongs {\r\n    songs {\r\n        title\r\n          duration\r\n          genre\r\n          id\r\n          artistId\r\n          artist{\r\n            name\r\n            country\r\n            id    \r\n        }\r\n    }\r\n  }\r\n`;\r\n\r\nfunction Artist() {\r\n    const { loading, error, data } = useQuery(GET_SONGS);\r\n\r\n    if (loading) return <p>Loading...</p>;\r\n    if (error) return <p>Error :(</p>;\r\n    console.log(data.songs)\r\n    return (\r\n        <div className='container'>\r\n            <h2 className=\"text-center mt-3\">Songs</h2>\r\n            <div className=\"row mt-5\">\r\n                {\r\n                    data.songs.map((v, i) => {\r\n                        return (\r\n                            <div className=\"col-md-4\">\r\n                                <div className=\"card py-5 px-5\" key={i}>\r\n                                    <h4>Song Title: {v.title}</h4>\r\n                                    <h4>Duration: {v.duration}</h4>\r\n                                    <h4>Genre: {v.genre}</h4>\r\n                                    <h4>Artist: {v.artist.name}</h4>\r\n                                    <h4>Country: {v.artist.country}</h4>\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Artist","import React from \"react\";\r\nimport { HashRouter as Router, Switch, Route, Redirect } from \"react-router-dom\";\r\nimport Artist from '../artist'\r\nimport Header from './header'\r\nimport Songs from '../songs'\r\nimport AllSongs from '../allSongs'\r\nfunction RouterConfig() {\r\n    return (\r\n        <Router>\r\n            <Header/>\r\n            <Switch>\r\n                <Route exact path=\"/\" component={Artist} />\r\n                <Route path=\"/songs/:id\" component={Songs} />\r\n                <Route path=\"/allsongs\" component={AllSongs} />\r\n            </Switch>\r\n        </Router>\r\n    )\r\n}\r\n\r\nexport default RouterConfig","import React from 'react'\nimport { ApolloProvider } from '@apollo/client/react';\nimport Client from './config/config'\n// import Home from './component/home'\nimport RouterConfig from './component/navbar/router'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nfunction App() {\n  return (\n    <ApolloProvider client={Client}>\n      <RouterConfig/>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}